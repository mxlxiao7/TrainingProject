println('---------------------------app.gradle start---------------------------------');
//apply from: rootProject.rootDir.getAbsolutePath() + "/utils.gradle";
//apply from: rootProject.rootDir.getAbsolutePath() + "/utils1.gradle";
apply plugin: 'com.android.application'
//apply plugin: 'groovyx.android'


android {

    compileSdkVersion 26
    buildToolsVersion '26.0.3'
    defaultConfig {
        applicationId "leon.trainingproject"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        jackOptions {
            enabled false
        }
        externalNativeBuild {
            cmake {
//                arguments  '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=gnustl_static'
                cppFlags "-frtti", "-fexceptions"
            }
        }
        ndk {

        }
    }

    signingConfigs {
        release {
            keyAlias 'mwzz'
            keyPassword '123456'
            storeFile file('./keystore/mm.jks')
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    dexOptions {
        incremental false
    }

    productFlavors {

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dataBinding {
        enabled = true
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support:design:26.+'
    compile 'org.greenrobot:eventbus:3.0.0'
    //    compile "org.codehaus.groovy:groovy:2.4.7:grooid"
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.squareup.okhttp3:okhttp-android-support:3.8.0'
    //内存检测
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:retrofit-converters:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.mcxiaoke.volley:library:1.0.19'
    compile 'cglib:cglib:2.2.2'
    compile 'org.aspectj:aspectjrt:1.9.0'
}

/**
 * 设置编译字符串类型
 */
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

/**
 *  复制
 */
//project.copy {
//    logger.log(LogLevel.ERROR, "project.copy");
//    into gradle.ext.testDir;
//    exclude '**/.svn/**';
//    from(rootDir.getAbsolutePath() + '/app/libs') {
//        include '**/*.jar'
//    }
//}

/**
 *  删除
 */
//project.delete {
//    logger.log(LogLevel.ERROR, "project.delete");
//    delete rootDir.getAbsolutePath() + "/test1.jar", rootDir.getAbsolutePath() + "/test2.jar";
//    followSymlinks = true;
//}

final def log = project.logger
final def variants = project.android.applicationVariants
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.7",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
println('---------------------------app.gradle end-----------------------------------');